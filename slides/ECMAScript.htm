<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>ECMAScript - By 李冬琳</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.moon.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>ECMAScript规范初探</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>是什么？</h1>
<ul>
<li>ECMAScript<ul>
<li>是一种由Ecma国际通过ECMA-262标准化的脚本程序设计语言，它的具体实现有JavaScript、JScript、ActionScript</li>
</ul>
</li>
<li>Ecma<ul>
<li>国际英文全称是Ecma International - European association for standardizing information and communication systems，前身是European Computer Manufacturers Association，ECMA就是其首字母的缩写，现在还保留是为了纪念历史。Ecma国际主要是制定通信技术、消费电子等的标准。其会员目前有Google、HP、Hitachi、IBM、Intel、Konica Minolta、MircroSoft、Paypal、Yahoo等.</li>
</ul>
</li>
<li>ECMA-262<ul>
<li>ECMA在1997年发布的262号标准，也就是ECMAScript 1.0</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>从哪里来？</h1>
<ul>
<li>ECMAScript规范由Ecma国际的TC39委员会制定，其中第一版在1997年发布，到目前为止有7版：ES1(1997)、ES2(1998)、ES3(1999)、ES5(2009)、ES5.1(2011)、ES6(2015)、ES2016(2016)</li>
<li>从ECMAScript2016(ES7)开始是每年发布一个版本，并且成文标准要从事实标准中诞生，实现先于标准存在</li>
<li>规范一共要经过<a href="https://tc39.github.io/process-document/" target="_blank">5个阶段</a>，最终才会写入规范<ul>
<li>stage0(Strawman)，只要注册会TC39的会员，就可以提交</li>
<li>stage1(Proposal)，进入标准是要描述清楚解决的问题，以及提供demos/polyfills。进入这个阶段说明TC39委员会愿意花时间来考虑你这提议</li>
<li>stage2(Draft),草案中包含新增特性语法和语义的，尽可能的完善的形式说明，允许包含一些待办事项或者占位符,必须包含2个实验性的具体实现，其中一个可以是用转译器实现的，例如Babel</li>
<li>stage3(Candidate)，候选阶段，要有规范文档，评审人和ECMAScript的编辑要在规范上签字，至少要有两个符合规范的具体实现</li>
<li>stage4(Finished)，完成阶段，必须通过<a href="https://github.com/tc39/test262" target="_blank">test262</a>测试，有2个通过测试的实现，以获取使用过程中的重要实践经验。ECMAScript的编辑必须规范上的签字</li>
</ul>
</li>
<li>TC39委员会中的成员就是各大浏览器产商的员工代表，每两个月会开一次会，讨论各个阶段的提议能不能进入下一阶段，每年的6月份会发布最新一版的ECMA-262标准</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>ES2017</h1>
<ul>
<li>将在今年6月份发布发布，包含的<a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md" target="_blank">新特性</a>主要有以下几个：<ul>
<li>Object.values/Object.entries</li>
<li>String padding</li>
<li>Object.getOwnPropertyDescriptors</li>
<li>Trailing commas in function parameter lists and calls</li>
<li>Async Functions</li>
<li>Shared memory and atomics</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>分号自动插入</h1>
<ul>
<li>js其实是可以不写分号的</li>
<li>什么时候会自动插入分号：
有三条主要的基本规则：</li>
</ul>
<ol>
<li>当从左到右解析程序代码，遇到一个任何产生式也无法识别的token，只要满足以下三个条件之一，就会在这个token之前插入一个分号：<ul>
<li>这个token被至少一个行终结符和前一个token分开</li>
<li>这个token是 }</li>
<li>这个token是 ) 并且插入分号后会被解析为do-while语句的结尾分号</li>
</ul>
</li>
<li>当从左到右解析程序代码，当输入流结束，整个输入流没法被解析为完整的ECMAScript脚本或者模块，那在输入流的末尾会自动插入分号</li>
<li>当从左到右解析程序代码，遇到一个被部分产生式解析的token，但是这些产生式是<em>受限产生式</em>，在受限产生式里紧跟在行终结符或者非行终结符后的第一个token被称作受限token。当至少一个行终结符把这个token和前一个token分割开的时候，会在受限token前插入分号</li>
</ol>
<p>然而，这有一个附加的优先条件：如果插入分号会导致语句是空语句或者插入的分号是for语句的中两个分号之一，那这个分号不会被插入。</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>受限token（++ -- break return throw yield）以及 箭头函数</h2>
<pre><code>return|throw|break|yield
a + b

//
return|throw|break|yield;
a+b

a = b
++c

// 
a=b;
++ca

// 
a 
=&gt; a
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>陷阱</h2>
<ul>
<li>1 + -<pre><code>var a = b = 1
  a=b
  +1
</code></pre></li>
<li>2<pre><code>a = b
  /something/.test(a)
</code></pre></li>
<li>3<pre><code>a = b
  (function () {})()
</code></pre></li>
<li>4<pre><code>a = b
  [1, 2, 3].forEach()
</code></pre></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>== 操作</h1>
<pre><code>var a = {}
a.valueOf = function () {
    return 1
}
var b = {}
b.valueOf = function () {
    return 1
}
console.log(a == b)
console.log(1 == a)
</code></pre><pre><code>1 == true
1 == &#39;1&#39;
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>x == y 算法规范：</h1>
<ul>
<li>如果x和y类型相等，返回x === y的结果</li>
<li>如果x和y是null或者undefined，返回ture</li>
<li>如果x和y是Number和String，把String转换为Number再比较</li>
<li>如果x和y有一个使Boolean，把Boolean转换为Number再比较</li>
<li>如果等号一侧是Object，另一侧是String、Number、Symbol，把Object转换为Primitive再比较</li>
<li>以上条件都不满足，返回false</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'slide3',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
 

<!--placeholder-->
</body>
</html>
