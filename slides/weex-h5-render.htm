<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>weex-h5-render - By 李冬琳</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.moon.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>weex-h5-render</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>weex</h2>
<ul>
<li>是阿里巴巴在今年4月份的Qcon大会上开源的跨平台移动开发工具，一份代码三端运行</li>
<li>DSL和vuejs相同， 以webcomponents标准，把一个组件分成templat、style、script 三部分以单文件的形式组织代码如helloworld.we</li>
<li>安装官方的weex-toolkit工具，weex helloworld.we在桌面预览及调试开发，官方还有一个Weex Playground App,可以用来在手机上实时预览</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>源代码</h2>
<pre><code>&lt;template&gt;
&lt;div&gt;
    &lt;text class=&quot;title&quot;&gt;hello weex&lt;/text&gt;
    &lt;text class=&quot;body&quot;&gt;ddd&lt;/text&gt;
&lt;/div&gt;
&lt;/template&gt;
&lt;style&gt;
.title {
    color:red;
}
.body {
    color: blue;
}
&lt;/style&gt;
</code></pre><ul>
<li>template只支持有限的标签，但是基本够用，比如div、text、input、textarea、a等等常见标签</li>
<li>weex原生提供list、slider、web等组件</li>
<li>css是使用的css-layout,是前端所用的css的一个子集，但是h5端支持全部css，为了三端通用不建议</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>weex-transformer之后的代码</h3>
<img src="./img/weex-transformer.png" alt="weex-render">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>demo</h2>
<p><a href="https://ldllidonglin.github.io/learn-output/demo/weex/" target="_blank">demo</a></p>
<pre><code>window.weex.init({
    appId: location.href,
    loader: &#39;source&#39;,
    source: &#39;define(&quot;@weex-component/foo&quot;, function (require, exports, module) {;;module.exports.style = {&quot;title&quot;: {&#39;+
&#39;&quot;color&quot;: &quot;#FF0000&quot;  },  &quot;body&quot;: {    &quot;color&quot;: &quot;#0000FF&quot;  }}&#39;+&#39;;module.exports.template = {&quot;type&quot;: &quot;div&quot;,&quot;children&quot;: [{&quot;type&quot;:&quot;text&quot;,      &quot;classList&quot;: [        &quot;title&quot;      ],      &quot;attr&quot;: {        &quot;value&quot;: &quot;hello weex&quot;      }    },{&quot;type&quot;: &quot;text&quot;,      &quot;classList&quot;: [&quot;body&quot;],&quot;attr&quot;: {&quot;value&quot;: &quot;ddd&quot;}}]};});bootstrap(&quot;@weex-component/foo&quot;, {&quot;transformerVersion&quot;:&quot;0.3.1&quot;})&#39;,
    rootId: &#39;weex&#39;
})
</code></pre><img src="./img/weex-render-dom.png" alt="weex-render-dom">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>init函数就是一序列的初始化，创建实例等操作，最后会把bundle代码以new Function的形式执行</li>
<li>这是它所需的参数<pre><code>const bundleDefine = (...args) =&gt; defineFn(app, ...args)
const bundleBootstrap = (name, config, _data) =&gt; {
  result = bootstrap(app, name, config, _data || data)
  updateActions(app)
  app.doc.listener.createFinish()
  console.debug(`[JS Framework] After intialized an instance(${app.id})`)
}
const bundleRequire = name =&gt; _data =&gt; {
  result = bootstrap(app, name, {}, _data)
}
...
</code></pre></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>用到的define、require、bootstrap等参数都会以参数的形式传递<pre><code>const fn = new Function(&#39;define&#39;,&#39;require&#39;,&#39;document&#39;,&#39;bootstrap&#39;,
    &#39;register&#39;,&#39;render&#39;,
    &#39;__weex_define__&#39;, // alias for define
    &#39;__weex_bootstrap__&#39;, // alias for bootstrap
    &#39;__weex_document__&#39;, // alias for bootstrap
    &#39;__weex_require__&#39;,
    &#39;__weex_viewmodel__&#39;,
    &#39;setTimeout&#39;,&#39;setInterval&#39;,&#39;clearTimeout&#39;,&#39;clearInterval&#39;,
    functionBody
  )
  fn(
    bundleDefine,bundleRequire,bundleDocument,bundleBootstrap,bundleRegister,bundleRender,
    bundleDefine, bundleBootstrap,bundleDocument,bundleRequireModule,bundleVm,timerAPIs.setTimeout,timerAPIs.setInterval,
    timerAPIs.clearTimeout,
    timerAPIs.clearInterval)
</code></pre></li>
<li>define函数主要就是register、init模块</li>
<li>bootstrap最后是创建一个VM实例：app.vm = new Vm(cleanName, null, { _app: app }, null, data)</li>
<li>VM的构造函数里主要做了如下几件事<pre><code>options = this._app.customComponentMap[type] 获得之前注册得component
initEvents(this, externalEvents) //初始化事件和生命周期
this.$emit(&#39;hook:init&#39;)
initState(this)                  // 初始化data、computed、（完成observe）function
this.$emit(&#39;hook:created&#39;)
build(this)  //开始编译、绘制
</code></pre></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>编译</h2>
<ul>
<li>build函数其实就是调用compile，compile结束后触发ready lifecycle</li>
<li>compile函数中有很多if语句，根据节点不同，派发编译到不同的函数比如<ul>
<li>compileRepeat</li>
<li>compileShown</li>
<li>...<br><span style="color:red">最终还是会调用compile函数</span></li>
</ul>
</li>
<li>compile函数最后一句是compileNativeComponent(vm, target, dest, type)，就是绘制NativeUI，因为compile是会递归调用的，所以每一次调用都会调用compileNativeComponent,实现流式渲染</li>
<li>compileNativeComponent函数中会根据ref属性，决定调用createBody方法还是createElement方法来创建element</li>
<li>compielNativeComponent最终会调用一个attachTarget函数，进行绘制<pre><code>attachTarget(vm, element, dest)
</code></pre></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>demo的绘制流程
<img src="./img/weex-html5-render.png" alt="weex-html5-render"></li>
<li>createBody方法也是会创建一个Element，只是这个Element特殊一点，会把这个Element的role设为‘body’，ref = ‘_root&#39;</li>
<li>attachTarget函数最终都是调用dest.appendChild函数，而body的父元素是document，document的appendChild函数是appendBody</li>
<li>appendBody函数会填充一些属性，比如docId,ownerDocument等，然后把这个vdom传给listener.createBody方法</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>渲染的原子操作都是appendChild</li>
<li>每个标签都对应着weex里的component，在h5端，component有一个node属性，保存着这个component对应的DOM，最终的操作就是
component.node.appendChild(childComponent.node,index)</li>
</ul>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'slide3',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
 

<!--placeholder-->
</body>
</html>
